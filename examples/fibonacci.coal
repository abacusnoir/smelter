#!/usr/bin/env smt run
;;;; Fibonacci Numbers - Clean Coalton syntax demonstration

;; Simple recursive fibonacci
(declare fib (Integer -> Integer))
(define (fib n)
  (if (<= n 1)
      n
      (+ (fib (- n 1))
         (fib (- n 2)))))

;; Optimized tail-recursive version
(declare fib-tail (Integer -> Integer -> Integer -> Integer))
(define (fib-tail n a b)
  (if (== n 0)
      a
      (fib-tail (- n 1) b (+ a b))))

(declare fib-fast (Integer -> Integer))
(define (fib-fast n)
  (fib-tail n 0 1))

(define main
  (progn
    (smelter.stdlib.io:io-println "Fibonacci Numbers:")
    (smelter.stdlib.io:io-println "==================")
    (smelter.stdlib.io:io-println "")
    (smelter.stdlib.io:io-println (<> "fib(10) = " (smelter.stdlib.io:show-int (fib 10))))
    (smelter.stdlib.io:io-println (<> "fib(20) = " (smelter.stdlib.io:show-int (fib-fast 20))))
    (smelter.stdlib.io:io-println (<> "fib(30) = " (smelter.stdlib.io:show-int (fib-fast 30))))))