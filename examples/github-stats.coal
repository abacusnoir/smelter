#!/usr/bin/env smt run

(use smelter/adapters/cli)
(use smelter/adapters/http)
(use smelter/adapters/json)
(use smelter/adapters/fs)
(use smelter/adapters/process)

(declare fetch-github-user (String -> (Optional String)))
(define (fetch-github-user username)
    "Fetch GitHub user data via API"
    (let ((url (mconcat (make-list "https://api.github.com/users/" username))))
      (match (http-get-json url)
        ((Ok response)
         (if (== (response-status response) 200)
             (Some (response-body response))
             None))
        (_ None))))

(declare fetch-github-repos (String -> (Optional String)))
(define (fetch-github-repos username)
    "Fetch GitHub user repositories"
    (let ((url (mconcat (make-list "https://api.github.com/users/" username "/repos"))))
      (match (http-get-json url)
        ((Ok response)
         (if (== (response-status response) 200)
             (Some (response-body response))
             None))
        (_ None))))

(declare extract-user-info (String -> (Optional String)))
(define (extract-user-info json-str)
    "Extract key user information from JSON"
    (match (parse-json json-str)
      ((Ok json-val)
       (let ((name (match (json-get-string "name" json-val)
                      ((Ok n) n)
                      (_ "N/A")))
             (public-repos (match (json-get-number "public_repos" json-val)
                             ((Ok n) (show (unsafe-integer-cast n)))
                             (_ "N/A")))
             (followers (match (json-get-number "followers" json-val)
                          ((Ok n) (show (unsafe-integer-cast n)))
                          (_ "N/A")))
             (following (match (json-get-number "following" json-val)
                          ((Ok n) (show (unsafe-integer-cast n)))
                          (_ "N/A"))))
         (Some (mconcat (make-list
                         "Name: " name "\n"
                         "Public Repos: " public-repos "\n"
                         "Followers: " followers "\n"
                         "Following: " following "\n")))))
      (_ None)))

(declare extract-repo-stats (String -> (Optional String)))
(define (extract-repo-stats json-str)
    "Extract repository statistics from JSON array"
    (match (parse-json json-str)
      ((Ok (JSONArray repos))
       (let ((total-repos (length repos))
             (total-stars (sum-repo-stars repos))
             (languages (collect-languages repos)))
         (Some (mconcat (make-list
                         "Total Repositories: " (show total-repos) "\n"
                         "Total Stars: " (show total-stars) "\n"
                         "Languages: " (join-strings ", " languages) "\n")))))
      (_ None)))

(declare sum-repo-stars ((List JSONValue) -> Integer))
(define (sum-repo-stars repos)
    "Sum stargazers count across repositories"
    (match repos
      ((Nil) 0)
      ((Cons repo rest)
       (let ((stars (match (json-get-number "stargazers_count" repo)
                      ((Ok n) (unsafe-integer-cast n))
                      (_ 0))))
         (+ stars (sum-repo-stars rest))))))

(declare collect-languages ((List JSONValue) -> (List String)))
(define (collect-languages repos)
    "Collect unique languages from repositories"
    (remove-duplicates (collect-languages-helper repos)))

(declare collect-languages-helper ((List JSONValue) -> (List String)))
(define (collect-languages-helper repos)
    "Helper to collect all languages"
    (match repos
      ((Nil) (make-list))
      ((Cons repo rest)
       (let ((lang (match (json-get-string "language" repo)
                     ((Ok l) (if (== l "null") None (Some l)))
                     (_ None))))
         (match lang
           ((Some l) (cons l (collect-languages-helper rest)))
           ((None) (collect-languages-helper rest)))))))

(declare remove-duplicates ((List String) -> (List String)))
(define (remove-duplicates lst)
    "Remove duplicate strings from list"
    (match lst
      ((Nil) (make-list))
      ((Cons x rest)
       (if (member? x rest)
           (remove-duplicates rest)
           (cons x (remove-duplicates rest))))))

(declare member? (String -> (List String) -> Boolean))
(define (member? item lst)
    "Check if item is member of list"
    (match lst
      ((Nil) False)
      ((Cons x rest)
       (if (== item x)
           True
           (member? item rest)))))

(declare join-strings (String -> (List String) -> String))
(define (join-strings separator lst)
    "Join list of strings with separator"
    (match lst
      ((Nil) "")
      ((Cons x (Nil)) x)
      ((Cons x rest)
       (mconcat (make-list x separator (join-strings separator rest))))))

(declare get-current-timestamp (Unit -> String))
(define (get-current-timestamp)
    "Get current timestamp via shell command"
    (match (run-process "date")
      ((Ok result) (trim-string (process-stdout result)))
      (_ "Unknown time")))

(declare trim-string (String -> String))
(define (trim-string s)
    "Remove leading/trailing whitespace"
    (lisp String (s) (cl:string-trim '(#\Space #\Tab #\Newline) s)))

(declare generate-report (String -> String -> String -> String -> String))
(define (generate-report username user-info repo-stats timestamp)
    "Generate comprehensive GitHub stats report"
    (mconcat (make-list
              "=== GitHub Statistics Report ===\n"
              "Generated: " timestamp "\n"
              "User: " username "\n\n"
              "=== User Information ===\n"
              user-info "\n"
              "=== Repository Statistics ===\n"
              repo-stats "\n"
              "=== Report Generated by Smelter ===\n"
              "All 5 adapters working: CLI, HTTP, JSON, FS, Process ✅\n")))

(declare unsafe-integer-cast (Double-Float -> Integer))
(define (unsafe-integer-cast n)
    "Convert double-float to integer (unsafe)"
    (lisp Integer (n) (cl:round n)))

(declare main Unit)
(define main
    "Main program demonstrating all 5 adapters"
    (let ((specs (make-list
                   (string-arg "username" "GitHub username to analyze" True)
                   (string-arg "output" "Output file path" False)
                   (boolean-arg "verbose" "Verbose output" False))))
      (match (parse-args specs (get-command-args))
        ((Ok args)
         (match (get-arg-string args "username")
           ((Ok username)
            (progn
              (when (get-verbose args) (println "🔍 Fetching GitHub user data..."))
              
              (match (fetch-github-user username)
                ((Some user-json)
                 (match (extract-user-info user-json)
                   ((Some user-info)
                    (progn
                      (when (get-verbose args) (println "📊 Fetching repository data..."))
                      
                      (match (fetch-github-repos username)
                        ((Some repos-json)
                         (match (extract-repo-stats repos-json)
                           ((Some repo-stats)
                            (progn
                              (when (get-verbose args) (println "⏰ Getting timestamp..."))
                              (let ((timestamp (get-current-timestamp))
                                    (report (generate-report username user-info repo-stats timestamp)))
                                
                                (match (get-arg args "output")
                                  ((Some output-file)
                                   (progn
                                     (when (get-verbose args) 
                                       (println (mconcat (make-list "💾 Writing report to " output-file "..."))))
                                     (match (write-file output-file report)
                                       ((Ok _) (println "✅ Report saved successfully!"))
                                       ((Err e) (println (mconcat (make-list "❌ Failed to write file: " (show e))))))))
                                  ((None)
                                   (println report))))))
                           ((None) (println "❌ Failed to parse repository statistics"))))
                        ((None) (println "❌ Failed to fetch repository data")))))
                   ((None) (println "❌ Failed to parse user information"))))
                ((None) (println (mconcat (make-list "❌ Failed to fetch data for user: " username)))))))
           ((Err e) (println (mconcat (make-list "❌ Missing username: " (show e)))))))
        ((Err e) 
         (progn
           (println (mconcat (make-list "❌ CLI parsing error: " (show e))))
           (println (generate-help specs)))))))

(declare get-verbose (Args -> Boolean))
(define (get-verbose args)
    "Get verbose flag from args"
    (match (get-arg-boolean args "verbose")
      ((Ok v) v)
      (_ False)))

(declare when (Boolean -> Unit -> Unit))
(define (when condition action)
    "Execute action if condition is true"
    (if condition action Unit))

(declare get-command-args (Unit -> (List String)))
(define (get-command-args)
    "Get command line arguments (mock for now)"
    (lisp (List String) ()
      (cl:rest sb-ext:*posix-argv*))))