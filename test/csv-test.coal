#!/usr/bin/env smt run

(coalton-toplevel
  (declare test-simple-parsing (Unit -> smelter.stdlib.test:TestResult))
  (define test-simple-parsing
    (smelter.stdlib.test:test-case "Simple CSV parsing"
      (fn ()
        (match (smelter.stdlib.csv:parse-csv "name,age,city\nAlice,30,New York\nBob,25,Boston")
          ((Ok (smelter.stdlib.csv:CSV csv-data))
           (== (length csv-data) 3))
          ((Err _) False)))))

  (declare test-quoted-fields (Unit -> smelter.stdlib.test:TestResult))
  (define test-quoted-fields
    (smelter.stdlib.test:test-case "Quoted fields parsing"
      (fn ()
        (match (smelter.stdlib.csv:parse-csv "product,description\n\"Laptop\",\"High-end, 16GB RAM\"")
          ((Ok (smelter.stdlib.csv:CSV csv-data))
           (== (length csv-data) 2))
          ((Err _) False)))))

  (declare test-stringify (Unit -> smelter.stdlib.test:TestResult))
  (define test-stringify
    (smelter.stdlib.test:test-case "CSV stringification"
      (fn ()
        (let ((data (make-list
                     (make-list "Product" "Price")
                     (make-list "Apple" "1.99")
                     (make-list "Banana" "0.59")))
              (result (smelter.stdlib.csv:stringify-csv (smelter.stdlib.csv:CSV data))))
          (/= result "")))))


  (define main
    (smelter.stdlib.test:run-test-suite "Smelter CSV Library Tests"
      (make-list
       test-simple-parsing
       test-quoted-fields
       test-stringify)))))