#!/usr/bin/env smt run

(coalton-toplevel
  (use smelter/test)
  (use smelter/adapters/json)
  (use smelter/adapters/fs)
  (use smelter/adapters/process)
  (use smelter/adapters/cli)
  (use smelter/adapters/http)

  (declare test-json-parser (Unit -> TestResult))
  (define test-json-parser
    (test-case "JSON Parser"
      (fn ()
        (match (parse-json "{\"test\": true, \"number\": 42}")
          ((Ok json-val)
           (match (json-get "test" json-val)
             ((Ok (JSONBool True)) True)
             (_ False)))
          (_ False)))))

  (declare test-json-stringify (Unit -> TestResult))
  (define test-json-stringify
    (test-case "JSON Stringify"
      (fn ()
        (let ((obj (json-object (make-list (Tuple "hello" (JSONString "world"))))))
          (== (stringify-json obj) "{\"hello\":\"world\"}")))))

  (declare test-json-path-access (Unit -> TestResult))
  (define test-json-path-access
    (test-case "JSON Path Access"
      (fn ()
        (match (parse-json "{\"user\": {\"name\": \"Alice\"}}")
          ((Ok json-val)
           (match (json-get-string "user.name" json-val)
             ((Ok name) (== name "Alice"))
             (_ False)))
          (_ False)))))

  (declare test-fs-operations (Unit -> TestResult))
  (define test-fs-operations
    (test-case "FS Operations"
      (fn ()
        (let ((test-file "/tmp/smelter-test-file.txt")
              (test-content "Hello, Smelter!"))
          (match (write-file test-file test-content)
            ((Ok _)
             (match (read-file test-file)
               ((Ok content)
                (progn
                  (delete-file test-file)
                  (== content test-content)))
               (_ False)))
            (_ False))))))

  (declare test-fs-file-info (Unit -> TestResult))
  (define test-fs-file-info
    (test-case "FS File Info"
      (fn ()
        (let ((test-file "/tmp/smelter-info-test.txt"))
          (match (write-file test-file "test data")
            ((Ok _)
             (match (get-file-info test-file)
               ((Ok (FileInfo size _ is-dir filename))
                (progn
                  (delete-file test-file)
                  (and (> size 0) (not is-dir))))
               (_ False)))
            (_ False))))))

  (declare test-process-execution (Unit -> TestResult))
  (define test-process-execution
    (test-case "Process Execution"
      (fn ()
        (match (run-process "echo test")
          ((Ok result)
           (let ((stdout (process-stdout result))
                 (exit-code (process-exit-code result)))
             (and (== exit-code 0) 
                  (string-contains? stdout "test"))))
          (_ False)))))

  (declare test-process-with-input (Unit -> TestResult))
  (define test-process-with-input
    (test-case "Process With Input"
      (fn ()
        (match (run-process-with-input "cat" "hello input")
          ((Ok result)
           (let ((stdout (process-stdout result)))
             (string-contains? stdout "hello input")))
          (_ False)))))

  (declare test-cli-parsing (Unit -> TestResult))
  (define test-cli-parsing
    (test-case "CLI Parsing"
      (fn ()
        (let ((specs (make-list 
                       (string-arg "name" "User name" True)
                       (boolean-arg "verbose" "Verbose output" False))))
          (match (parse-args specs (make-list "--name" "Alice" "--verbose"))
            ((Ok args)
             (match (get-arg-string args "name")
               ((Ok name) (== name "Alice"))
               (_ False)))
            (_ False))))))

  (declare test-cli-boolean-args (Unit -> TestResult))
  (define test-cli-boolean-args
    (test-case "CLI Boolean Args"
      (fn ()
        (let ((specs (make-list (boolean-arg "flag" "Test flag" False))))
          (match (parse-args specs (make-list "--flag"))
            ((Ok args)
             (match (get-arg-boolean args "flag")
               ((Ok flag-val) flag-val)
               (_ False)))
            (_ False))))))

  (declare test-http-requests (Unit -> TestResult))
  (define test-http-requests
    (test-case "HTTP Requests"
      (fn ()
        (match (http-get "https://httpbin.org/get")
          ((Ok response)
           (== (response-status response) 200))
          (_ False)))))

  (declare test-http-json-response (Unit -> TestResult))
  (define test-http-json-response
    (test-case "HTTP JSON Response"
      (fn ()
        (match (http-get-json "https://httpbin.org/json")
          ((Ok response)
           (let ((body (response-body response)))
             (match (parse-json body)
               ((Ok _) True)
               (_ False))))
          (_ False)))))

  (declare string-contains? (String -> String -> Boolean))
  (define (string-contains? haystack needle)
    "Check if string contains substring"
    (lisp Boolean (haystack needle)
      (cl:search needle haystack)))

  (define main
    (run-test-suite "Smelter Adapter Tests"
      (make-list
       test-json-parser
       test-json-stringify
       test-json-path-access
       test-fs-operations
       test-fs-file-info
       test-process-execution
       test-process-with-input
       test-cli-parsing
       test-cli-boolean-args
       test-http-requests
       test-http-json-response))))