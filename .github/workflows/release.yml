name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        default: 'v0.1.0'

jobs:
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            platform: darwin-x64
            sbcl-arch: x64
          - os: macos-14  # Apple Silicon
            platform: darwin-arm64
            sbcl-arch: arm64

          # Linux builds
          - os: ubuntu-latest
            platform: linux-x64
            sbcl-arch: x64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SBCL (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y sbcl

      - name: Install SBCL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install sbcl

      - name: Verify SBCL installation
        run: |
          sbcl --version
          which sbcl

      - name: Build Smelter
        run: |
          make deps || true  # Continue if deps already installed
          make build

      - name: Test binary
        run: |
          ./smt --version
          ./smt eval '1'

      - name: Create release binary with platform naming
        run: |
          mkdir -p dist
          # Determine platform and arch
          if [[ "${{ matrix.platform }}" == *"darwin"* ]]; then
            PLATFORM="darwin"
          else
            PLATFORM="linux"
          fi

          if [[ "${{ matrix.platform }}" == *"arm64"* ]]; then
            ARCH="arm64"
          else
            ARCH="x64"
          fi

          BINARY_NAME="smt-${PLATFORM}-${ARCH}"
          cp smt dist/${BINARY_NAME}

          # Create tarball and checksum
          cd dist
          tar -czf ${BINARY_NAME}.tar.gz ${BINARY_NAME}
          shasum -a 256 ${BINARY_NAME}.tar.gz > ${BINARY_NAME}.tar.gz.sha256

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: smt-${{ matrix.platform }}
          path: dist/smt-${{ matrix.platform }}*
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Prepare release assets
        run: |
          # Flatten artifact directories
          find dist/ -name 'smt-*' -type f -exec mv {} dist/ \;
          ls -la dist/

      - name: Get release info
        id: release_info
        run: |
          if [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_info.outputs.version }}
          release_name: Smelter ${{ steps.release_info.outputs.version }}
          body: |
            # Smelter ${{ steps.release_info.outputs.version }}

            ðŸ”¥ Type-safe scripting with ~43ms startup

            ## Installation

            ### Quick Install (Recommended)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/latest/download/install.sh | bash
            ```

            ### Manual Download
            Download the binary for your platform below, make it executable, and add to your PATH.

            ## What's New
            - See [CHANGELOG.md](CHANGELOG.md) for details

            ## Supported Platforms
            - macOS (Intel and Apple Silicon)
            - Linux (x86_64)

            ## Quick Start
            ```bash
            # Verify installation
            smt --version

            # Try a simple expression
            smt eval '1'

            # Start interactive REPL
            smt repl
            ```
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for file in dist/smt-*.tar.gz; do
            echo "Uploading $file..."
            curl \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$(basename $file)"
          done

          for file in dist/smt-*.sha256; do
            echo "Uploading $file..."
            curl \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: text/plain" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$(basename $file)"
          done

      - name: Upload install script
        run: |
          curl \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/x-sh" \
            --data-binary @scripts/install.sh \
            "${{ steps.create_release.outputs.upload_url }}?name=install.sh"

  test-release:
    name: Test Release Installation
    needs: release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Get release version
        id: version
        run: |
          if [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Testing release version: $VERSION"

      - name: Wait for release to be available
        run: |
          echo "Waiting 30 seconds for GitHub to process release assets..."
          sleep 30

      - name: Test installation from specific release
        run: |
          # Download install script from the specific release
          VERSION="${{ steps.version.outputs.version }}"
          echo "Downloading install script from release $VERSION..."

          curl -fsSL "https://github.com/${{ github.repository }}/releases/download/${VERSION}/install.sh" -o /tmp/install.sh

          # Run the install script
          bash /tmp/install.sh

          # Verify it works
          export PATH="$HOME/.local/bin:$PATH"
          smt --version
          smt eval '1'