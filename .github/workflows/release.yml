name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        default: 'v0.1.0'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.release_info.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get release info
        id: release_info
        run: |
          if [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view "${{ steps.release_info.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.release_info.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.release_info.outputs.version }} does not exist, will create"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: steps.check_release.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"

          gh release create "$VERSION" \
            --title "Smelter $VERSION" \
            --notes "# Smelter $VERSION

          ðŸ”¥ Type-safe scripting with ~43ms startup

          ## Installation

          ### Quick Install (Recommended)
          \`\`\`bash
          curl -L https://github.com/${{ github.repository }}/releases/latest/download/install.sh | bash
          \`\`\`

          ### Manual Download
          Download the binary for your platform below, make it executable, and add to your PATH.

          ## What's New
          - See [CHANGELOG.md](CHANGELOG.md) for details

          ## Supported Platforms
          - macOS (Intel and Apple Silicon)
          - Linux (x86_64)

          ## Quick Start
          \`\`\`bash
          # Verify installation
          smt --version

          # Try a simple expression
          smt eval '1'

          # Start interactive REPL
          smt repl
          \`\`\`"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build for ${{ matrix.platform }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    strategy:
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            platform: darwin-x64
            sbcl-arch: x64
          - os: macos-14  # Apple Silicon
            platform: darwin-arm64
            sbcl-arch: arm64

          # Linux builds
          - os: ubuntu-latest
            platform: linux-x64
            sbcl-arch: x64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SBCL (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y sbcl

      - name: Install SBCL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install sbcl

      - name: Verify SBCL installation
        run: |
          sbcl --version
          which sbcl

      - name: Build Smelter
        run: |
          make deps || true  # Continue if deps already installed
          make build

      - name: Test binary
        run: |
          ./smt --version
          ./smt eval '1'

      - name: Create release binary with platform naming
        run: |
          mkdir -p dist
          # Determine platform and arch
          if [[ "${{ matrix.platform }}" == *"darwin"* ]]; then
            PLATFORM="darwin"
          else
            PLATFORM="linux"
          fi

          if [[ "${{ matrix.platform }}" == *"arm64"* ]]; then
            ARCH="arm64"
          else
            ARCH="x64"
          fi

          BINARY_NAME="smt-${PLATFORM}-${ARCH}"
          cp smt dist/${BINARY_NAME}

          # Create tarball and checksum
          cd dist
          tar -czf ${BINARY_NAME}.tar.gz ${BINARY_NAME}
          shasum -a 256 ${BINARY_NAME}.tar.gz > ${BINARY_NAME}.tar.gz.sha256

      - name: Upload to release
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"

          # Upload tarball and checksum directly to release
          cd dist
          echo "Uploading to release $VERSION..."
          gh release upload "$VERSION" *.tar.gz *.sha256 --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-install-script:
    name: Upload Install Script
    needs: [create-release, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Upload install script to release
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"

          # Verify install script exists
          if [ ! -f scripts/install.sh ]; then
            echo "Error: scripts/install.sh not found!"
            ls -la scripts/
            exit 1
          fi

          # Upload install script (binaries already uploaded by build jobs)
          echo "Uploading install script to release $VERSION..."
          gh release upload "$VERSION" scripts/install.sh --clobber

          # List all uploaded assets
          echo "All release assets:"
          gh release view "$VERSION" --json assets --jq '.assets[].name'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-release:
    name: Test Release Installation
    needs: [create-release, upload-install-script]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:

      - name: Wait for release to be available
        run: |
          echo "Waiting 30 seconds for GitHub to process release assets..."
          sleep 30

      - name: Test installation from specific release
        run: |
          # Download install script from the specific release
          VERSION="${{ needs.create-release.outputs.version }}"
          echo "Downloading install script from release $VERSION..."

          curl -fsSL "https://github.com/${{ github.repository }}/releases/download/${VERSION}/install.sh" -o /tmp/install.sh

          # Run the install script
          bash /tmp/install.sh

          # Verify it works
          export PATH="$HOME/.local/bin:$PATH"
          smt --version
          smt eval '1'

  test-homebrew-installation:
    name: Test Homebrew Installation
    needs: [create-release, upload-install-script]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]

    steps:
      - name: Wait for release assets to propagate
        run: |
          echo "Waiting 60 seconds for GitHub release assets to propagate..."
          sleep 60

      - name: Install Homebrew (Linux)
        if: runner.os == 'Linux'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH

      - name: Tap and install via Homebrew
        run: |
          brew tap abacusnoir/smelter
          brew install smelter

      - name: Test Homebrew installation
        run: |
          # Test binary works
          smt --version
          smt eval '(+ 2 3)'

          # Verify version matches release
          VERSION="${{ needs.create-release.outputs.version }}"
          echo "Expected version: ${VERSION#v}"
          smt --version

      - name: Cleanup
        if: always()
        run: |
          brew uninstall smelter || true
          brew untap abacusnoir/smelter || true